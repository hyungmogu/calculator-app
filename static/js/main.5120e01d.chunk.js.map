{"version":3,"sources":["components/Context/index.js","components/Display.js","data/buttons.js","components/NumberPad.js","App.js","serviceWorker.js","index.js"],"names":["CalculatorContext","React","createContext","Provider","state","display","currentNumber","lock","handleAddDecimal","setState","prevState","includes","length","trim","handleAddNumber","value","handleAddOperator","secondLastDigit","slice","handleCalculate","newNumber","eval","Error","handleClear","handleToggleSign","newCurrentNumber","parseFloat","replace","this","actions","addOperator","addDecimal","toggleSign","calculate","clear","addNumber","props","children","Component","Consumer","Display","className","CalculatorButtonsList","id","type","label","NumberPad","map","button","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5120e01d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst CalculatorContext = React.createContext();\n\nexport class Provider extends Component {\n    state = {\n        display: '0',\n        currentNumber: '0',\n        lock: false\n    }\n\n    handleAddDecimal = () => {\n        let decimal = '.';\n\n        this.setState( prevState => {\n            if (prevState.lock) {\n            return null;\n            }\n\n            if (prevState.currentNumber.includes(decimal)) {\n            return null;\n            }\n\n            if (prevState.display[prevState.display.length - 1].trim() === '') {\n            return {\n                display: prevState.display + '0' + decimal,\n                currentNumber: prevState.currentNumber + decimal\n            }\n            }\n\n            return {\n            display: prevState.display + decimal,\n            currentNumber: prevState.currentNumber + decimal\n            }\n        });\n    }\n\n    handleAddNumber = (value) => {\n        this.setState( prevState => {\n\n            if (prevState.lock) {\n            return null;\n            }\n\n            if (prevState.display === '0') {\n            return {\n                display: value,\n                currentNumber: value\n            }\n            }\n\n            return {\n            display: prevState.display + value,\n            currentNumber: prevState.currentNumber + value\n            }\n        });\n    }\n\n    handleAddOperator = (value) => {\n        this.setState( prevState => {\n            let secondLastDigit = prevState.display[prevState.display.length - 2];\n            let operators = ['+', '-', '/', '*'];\n\n            if (prevState.lock) {\n            return null;\n            }\n\n            if (operators.includes(secondLastDigit)) {\n            return {\n                display: `${prevState.display.slice(0, -3)} ${value} `,\n                currentNumber: '0'\n            }\n            }\n\n            return {\n            display: `${prevState.display} ${value} `,\n            currentNumber: '0'\n            }\n        });\n    }\n\n    handleCalculate = () => {\n        this.setState( prevState => {\n            let newNumber;\n\n            if (prevState.lock) {\n            return null;\n            }\n\n            try {\n            newNumber = `${eval(prevState.display)}`;\n            } catch (Error) {\n            return {\n                display: 'Error',\n                lock: true\n            }\n            }\n\n            if (newNumber === 'Infinity') {\n            return {\n                display: newNumber,\n                lock: true\n            }\n            }\n\n            return {\n            display: newNumber,\n            currentNumber: newNumber\n            }\n        });\n    }\n\n    handleClear = () => {\n        this.setState({\n            display: '0',\n            currentNumber: '0',\n            lock: false\n        })\n    }\n\n    handleToggleSign = () => {\n        this.setState( prevState => {\n\n            if (prevState.lock) {\n            return null;\n            }\n\n            if (prevState.currentNumber === '0') {\n            return null;\n            }\n\n            let newCurrentNumber = `${-1 * parseFloat(prevState.currentNumber)}`;\n\n            return {\n            display: prevState.display.replace(/([^\\s]+)$/i, newCurrentNumber),\n            currentNumber: newCurrentNumber\n            }\n        });\n    }\n\n    render() {\n        return (\n            <CalculatorContext.Provider\n                value={{\n                    display: this.state.display,\n                    currentNumber: this.state.currentNumber,\n                    lock: this.state.lock,\n                    actions: {\n                        addOperator: this.handleAddOperator,\n                        addDecimal: this.handleAddDecimal,\n                        toggleSign: this.handleToggleSign,\n                        calculate: this.handleCalculate,\n                        clear: this.handleClear,\n                        addNumber: this.handleAddNumber\n                    }\n                }}\n            >\n                {this.props.children}\n            </CalculatorContext.Provider>\n        );\n    }\n}\n\nexport const Consumer = CalculatorContext.Consumer;","import React from 'react';\n\nimport { Consumer } from './Context';\n\nconst Display = () => (\n    <Consumer>\n        { ({display}) =>\n            <section className=\"display\">{display}</section>\n        }\n    </Consumer>\n);\n\nexport default Display;","const CalculatorButtonsList = [\n    {\n        id: \"button-clear\",\n        type: \"clear\",\n        label: \"Clear\"\n    },\n    {\n        id: \"button-plus\",\n        type: \"operator\",\n        label: \"+\",\n        value: \"+\"\n    },\n    {\n        id: \"button-7\",\n        type: \"number\",\n        label: \"7\",\n        value: \"7\"\n    },\n    {\n        id: \"button-8\",\n        type: \"number\",\n        label: \"8\",\n        value: \"8\"\n    },\n    {\n        id: \"button-9\",\n        type: \"number\",\n        label: \"9\",\n        value: \"9\"\n    },\n    {\n        id: \"button-minus\",\n        type: \"operator\",\n        label: \"-\",\n        value: \"-\"\n    },\n    {\n        id: \"button-4\",\n        type: \"number\",\n        label: \"4\",\n        value: \"4\"\n    },\n    {\n        id: \"button-5\",\n        type: \"number\",\n        label: \"5\",\n        value: \"5\"\n    },\n    {\n        id: \"button-6\",\n        type: \"number\",\n        label: \"6\",\n        value: \"6\"\n    },\n    {\n        id: \"button-division\",\n        type: \"operator\",\n        label: \"÷\",\n        value: \"/\"\n    },\n    {\n        id: \"button-1\",\n        type: \"number\",\n        label: \"1\",\n        value: \"1\"\n    },\n    {\n        id: \"button-2\",\n        type: \"number\",\n        label: \"2\",\n        value: \"2\"\n    },\n    {\n        id: \"button-3\",\n        type: \"number\",\n        label: \"3\",\n        value: \"3\"\n    },\n    {\n        id: \"button-product\",\n        type: \"operator\",\n        label: \"x\",\n        value: \"*\"\n    },\n    {\n        id: \"button-sign\",\n        type: \"sign\",\n        label: \"+/-\"\n    },\n    {\n        id: \"button-decimal\",\n        type: \"decimal\",\n        label: \".\"\n    },\n    {\n        id: \"button-0\",\n        type: \"number\",\n        label: \"0\",\n        value: \"0\"\n    },\n    {\n        id: \"button-calculate\",\n        type: \"calculate\",\n        label: \"=\"\n    }\n];\n\n\nexport default CalculatorButtonsList;","import React, { Component } from 'react';\n\nimport { Consumer } from './Context';\n\nimport CalculatorButtonsList from '../data/buttons';\n\nclass NumberPad extends Component {\n\n    render() {\n        return (\n            <Consumer>\n                { ({actions}) => (\n                    <section className=\"number-pad\">\n                        {CalculatorButtonsList.map( button => {\n\n                            if (button.type === 'operator') {\n                                return (\n                                <div\n                                    key={button.id}\n                                    className={`btn btn--operator`}\n                                    onClick={ () => actions.addOperator(button.value)}\n                                >\n                                    {button.label}\n                                </div>\n                                );\n                            } else if (button.type === 'decimal') {\n                                return (\n                                <div\n                                    key={button.id}\n                                    className={`btn btn--decimal`}\n                                    onClick={ () => actions.addDecimal()}\n                                >\n                                    {button.label}\n                                </div>\n                                );\n                            } else if (button.type === 'sign') {\n                                return (\n                                <div\n                                    key={button.id}\n                                    className={`btn btn--sign`}\n                                    onClick={ () => actions.toggleSign()}\n                                >\n                                    {button.label}\n                                </div>\n                                );\n                            } else if (button.type === 'calculate') {\n                                return (\n                                <div\n                                    key={button.id}\n                                    className={`btn btn--calculate`}\n                                    onClick={ () => actions.calculate()}\n                                >\n                                    {button.label}\n                                </div>\n                                );\n                            } else if (button.type === 'clear') {\n                                return (\n                                <div\n                                    key={button.id}\n                                    className={`btn btn--clear`}\n                                    onClick={ () => actions.clear()}\n                                >\n                                    {button.label}\n                                </div>\n                                );\n                            }\n\n                            return (\n                                <div\n                                key={button.id}\n                                className={`btn btn--number`}\n                                onClick={ () => actions.addNumber(button.value)}\n                                >\n                                {button.label}\n                                </div>\n                            );\n                        })}\n                    </section>\n                )}\n            </Consumer>\n        );\n    }\n}\n\nexport default NumberPad;","import React from 'react';\n\nimport './App.css';\n\nimport Display from './components/Display';\nimport NumberPad from './components/NumberPad';\n\nconst App = ({display}) => (\n  <div className=\"App\">\n    <main>\n        <div className=\"calculator\">\n          <Display/>\n          <NumberPad/>\n      </div>\n    </main>\n  </div>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/style.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from './components/Context'\n\n\nReactDOM.render(\n    <Provider>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}