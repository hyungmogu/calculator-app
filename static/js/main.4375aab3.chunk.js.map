{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","display","addDecimal","addNumber","addOperator","calculate","clear","toggleSign","this","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sKAAAA,EAAOC,QAAU,IAA0B,kC,qICqE5BC,G,uNA/DbC,MAAQ,CACNC,QAAS,S,EAGXC,WAAa,a,EAIbC,UAAY,a,EAIZC,YAAc,a,EAIdC,UAAY,a,EAIZC,MAAQ,a,EAIRC,WAAa,a,wEAKX,IAAIN,EAAUO,KAAKR,MAAMC,QAEzB,OACE,yBAAKQ,UAAU,OACb,8BACI,yBAAKA,UAAU,cACb,6BAASA,UAAU,WAAWR,GAC9B,6BAASQ,UAAU,cACf,yBAAKA,UAAU,iBAAiBC,QAASF,KAAKF,SAA9C,SACA,yBAAKG,UAAU,wBAAwBC,QAASF,KAAKJ,YAAY,MAAjE,KACA,yBAAKK,UAAU,oBAAoBC,QAASF,KAAKL,UAAU,MAA3D,KACA,yBAAKM,UAAU,oBAAoBC,QAASF,KAAKL,UAAU,MAA3D,KACA,yBAAKM,UAAU,oBAAoBC,QAASF,KAAKL,UAAU,MAA3D,KACA,yBAAKM,UAAU,yBAAyBC,QAASF,KAAKJ,YAAY,MAAlE,KACA,yBAAKK,UAAU,oBAAoBC,QAASF,KAAKL,UAAU,MAA3D,KACA,yBAAKM,UAAU,oBAAoBC,QAASF,KAAKL,UAAU,MAA3D,KACA,yBAAKM,UAAU,oBAAoBC,QAASF,KAAKL,UAAU,MAA3D,KACA,yBAAKM,UAAU,4BAA4BC,QAASF,KAAKJ,YAAY,MAArE,QACA,yBAAKK,UAAU,oBAAoBC,QAASF,KAAKL,UAAU,MAA3D,KACA,yBAAKM,UAAU,oBAAoBC,QAASF,KAAKL,UAAU,MAA3D,KACA,yBAAKM,UAAU,oBAAoBC,QAASF,KAAKL,UAAU,MAA3D,KACA,yBAAKM,UAAU,2BAA2BC,QAASF,KAAKJ,YAAY,MAApE,KACA,yBAAKK,UAAU,gBAAgBC,QAASF,KAAKD,cAA7C,OACA,yBAAKE,UAAU,mBAAmBC,QAASF,KAAKN,WAAW,MAA3D,KACA,yBAAKO,UAAU,oBAAoBC,QAASF,KAAKL,UAAU,MAA3D,KACA,yBAAKM,UAAU,yBAAyBC,QAASF,KAAKH,aAAtD,a,GAxDAM,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4375aab3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    display: 'hello'\n  }\n\n  addDecimal = () => {\n\n  }\n\n  addNumber = () => {\n\n  }\n\n  addOperator = () => {\n\n  }\n\n  calculate = () => {\n\n  }\n\n  clear = () => {\n\n  }\n\n  toggleSign = () => {\n\n  }\n\n  render() {\n    let display = this.state.display;\n\n    return (\n      <div className=\"App\">\n        <main>\n            <div className=\"calculator\">\n              <section className=\"display\">{display}</section>\n              <section className=\"number-pad\">\n                  <div className=\"btn btn--clear\" onClick={this.clear()}>Clear</div>\n                  <div className=\"btn btn--operand-plus\" onClick={this.addOperator('+')}>+</div>\n                  <div className=\"btn btn--number-7\" onClick={this.addNumber('7')}>7</div>\n                  <div className=\"btn btn--number-8\" onClick={this.addNumber('8')}>8</div>\n                  <div className=\"btn btn--number-9\" onClick={this.addNumber('9')}>9</div>\n                  <div className=\"btn btn--operand-minus\" onClick={this.addOperator('-')}>-</div>\n                  <div className=\"btn btn--number-4\" onClick={this.addNumber('4')}>4</div>\n                  <div className=\"btn btn--number-5\" onClick={this.addNumber('5')}>5</div>\n                  <div className=\"btn btn--number-6\" onClick={this.addNumber('6')}>6</div>\n                  <div className=\"btn btn--operand-division\" onClick={this.addOperator('+')}>รท</div>\n                  <div className=\"btn btn--number-1\" onClick={this.addNumber('7')}>7</div>\n                  <div className=\"btn btn--number-2\" onClick={this.addNumber('8')}>8</div>\n                  <div className=\"btn btn--number-3\" onClick={this.addNumber('9')}>9</div>\n                  <div className=\"btn btn--operand-product\" onClick={this.addOperator('*')}>x</div>\n                  <div className=\"btn btn--sign\" onClick={this.toggleSign()}>+/-</div>\n                  <div className=\"btn btn--decimal\" onClick={this.addDecimal('.')}>.</div>\n                  <div className=\"btn btn--number-0\" onClick={this.addNumber('0')}>0</div>\n                  <div className=\"btn btn--operand-equal\" onClick={this.calculate()}>=</div>\n              </section>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}