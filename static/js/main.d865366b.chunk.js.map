{"version":3,"sources":["App.js","data/buttons.js","logo.svg","serviceWorker.js","index.js"],"names":["App","state","display","currentNumber","addDecimal","setState","prevState","lock","includes","length","trim","addNumber","value","addOperator","secondLastDigit","slice","calculate","newNumber","eval","Error","clear","toggleSign","newCurrentNumber","parseFloat","replace","this","buttons","CalculatorButtonsList","map","button","type","key","id","className","onClick","label","Component","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d865366b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport CalculatorButtonsList from './data/buttons';\n\nclass App extends Component {\n\n  state = {\n    display: '0',\n    currentNumber: '0'\n  }\n\n  addDecimal = () => {\n    let decimal = '.';\n\n    this.setState( prevState => {\n      if (prevState.lock) {\n        return null;\n      }\n\n      if (prevState.currentNumber.includes(decimal)) {\n        return null;\n      }\n\n      if (prevState.display[prevState.display.length - 1].trim() === '') {\n        return {\n          display: prevState.display + '0' + decimal,\n          currentNumber: prevState.currentNumber + decimal\n        }\n      }\n\n      return {\n        display: prevState.display + decimal,\n        currentNumber: prevState.currentNumber + decimal\n      }\n    });\n  }\n\n  addNumber = (value) => {\n    this.setState( prevState => {\n\n      if (prevState.lock) {\n        return null;\n      }\n\n      if (prevState.display === '0') {\n        return {\n          display: value,\n          currentNumber: value\n        }\n      }\n\n      return {\n        display: prevState.display + value,\n        currentNumber: prevState.currentNumber + value\n      }\n    });\n  }\n\n  addOperator = (value) => {\n    this.setState( prevState => {\n      let secondLastDigit = prevState.display[prevState.display.length - 2];\n      let operators = ['+', '-', '/', '*'];\n\n      if (prevState.lock) {\n        return null;\n      }\n\n      if (operators.includes(secondLastDigit)) {\n        return {\n          display: `${prevState.display.slice(0, -3)} ${value} `,\n          currentNumber: '0'\n        }\n      }\n\n      return {\n        display: `${prevState.display} ${value} `,\n        currentNumber: '0'\n      }\n    });\n  }\n\n  calculate = () => {\n    this.setState( prevState => {\n      let newNumber;\n\n      if (prevState.lock) {\n        return null;\n      }\n\n      try {\n        newNumber = `${eval(prevState.display)}`;\n      } catch (Error) {\n        return {\n          display: 'Error',\n          lock: true\n        }\n      }\n\n      if (newNumber === 'Infinity') {\n        return {\n          display: newNumber,\n          lock: true\n        }\n      }\n\n      return {\n        display: newNumber,\n        currentNumber: newNumber\n      }\n    });\n  }\n\n  clear = () => {\n    this.setState({\n      display: '0',\n      currentNumber: '0',\n      lock: false\n    })\n  }\n\n  toggleSign = () => {\n    this.setState( prevState => {\n\n      if (prevState.lock) {\n        return null;\n      }\n\n      if (prevState.currentNumber === '0') {\n        return null;\n      }\n\n      let newCurrentNumber = `${-1 * parseFloat(prevState.currentNumber)}`;\n\n      return {\n        display: prevState.display.replace(/([^\\s]+)$/i, newCurrentNumber),\n        currentNumber: newCurrentNumber\n      }\n    });\n  }\n\n  render() {\n    let display = this.state.display;\n    let buttons = CalculatorButtonsList.map( button => {\n\n      if (button.type === 'operator') {\n        return (\n          <div\n            key={button.id}\n            className={`btn btn--operator`}\n            onClick={ () => this.addOperator(button.value)}\n          >\n            {button.label}\n          </div>\n        );\n      } else if (button.type === 'decimal') {\n        return (\n          <div\n            key={button.id}\n            className={`btn btn--decimal`}\n            onClick={ () => this.addDecimal()}\n          >\n            {button.label}\n          </div>\n        );\n      } else if (button.type === 'sign') {\n        return (\n          <div\n            key={button.id}\n            className={`btn btn--sign`}\n            onClick={ () => this.toggleSign()}\n          >\n            {button.label}\n          </div>\n        );\n      } else if (button.type === 'calculate') {\n        return (\n          <div\n            key={button.id}\n            className={`btn btn--calculate`}\n            onClick={ () => this.calculate()}\n          >\n            {button.label}\n          </div>\n        );\n      } else if (button.type === 'clear') {\n        return (\n          <div\n            key={button.id}\n            className={`btn btn--clear`}\n            onClick={ () => this.clear()}\n          >\n            {button.label}\n          </div>\n        );\n      }\n\n      return (\n        <div\n          key={button.id}\n          className={`btn btn--number`}\n          onClick={ () => this.addNumber(button.value)}\n        >\n          {button.label}\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <main>\n            <div className=\"calculator\">\n              <section className=\"display\">{display}</section>\n              <section className=\"number-pad\">\n                  {buttons}\n              </section>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const CalculatorButtonsList = [\n    {\n        id: \"button-clear\",\n        type: \"clear\",\n        label: \"Clear\"\n    },\n    {\n        id: \"button-plus\",\n        type: \"operator\",\n        label: \"+\",\n        value: \"+\"\n    },\n    {\n        id: \"button-7\",\n        type: \"number\",\n        label: \"7\",\n        value: \"7\"\n    },\n    {\n        id: \"button-8\",\n        type: \"number\",\n        label: \"8\",\n        value: \"8\"\n    },\n    {\n        id: \"button-9\",\n        type: \"number\",\n        label: \"9\",\n        value: \"9\"\n    },\n    {\n        id: \"button-minus\",\n        type: \"operator\",\n        label: \"-\",\n        value: \"-\"\n    },\n    {\n        id: \"button-4\",\n        type: \"number\",\n        label: \"4\",\n        value: \"4\"\n    },\n    {\n        id: \"button-5\",\n        type: \"number\",\n        label: \"5\",\n        value: \"5\"\n    },\n    {\n        id: \"button-6\",\n        type: \"number\",\n        label: \"6\",\n        value: \"6\"\n    },\n    {\n        id: \"button-division\",\n        type: \"operator\",\n        label: \"÷\",\n        value: \"/\"\n    },\n    {\n        id: \"button-1\",\n        type: \"number\",\n        label: \"1\",\n        value: \"1\"\n    },\n    {\n        id: \"button-2\",\n        type: \"number\",\n        label: \"2\",\n        value: \"2\"\n    },\n    {\n        id: \"button-3\",\n        type: \"number\",\n        label: \"3\",\n        value: \"3\"\n    },\n    {\n        id: \"button-product\",\n        type: \"operator\",\n        label: \"x\",\n        value: \"*\"\n    },\n    {\n        id: \"button-sign\",\n        type: \"sign\",\n        label: \"+/-\"\n    },\n    {\n        id: \"button-decimal\",\n        type: \"decimal\",\n        label: \".\"\n    },\n    {\n        id: \"button-0\",\n        type: \"number\",\n        label: \"0\",\n        value: \"0\"\n    },\n    {\n        id: \"button-calculate\",\n        type: \"calculate\",\n        label: \"=\"\n    }\n];\n\n\nexport default CalculatorButtonsList;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}